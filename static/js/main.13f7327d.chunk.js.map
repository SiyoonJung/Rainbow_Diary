{"version":3,"sources":["DiaryEditor.js","DiaryItem.js","DiaryList.js","App.js","index.js"],"names":["DiaryEditor","onCreate","useContext","DiaryDispatchContext","useEffect","console","log","useState","author","content","emotion","diary","setDiary","handleChangeDiary","e","target","name","value","authorRef","useRef","contentRef","className","ref","placeholder","type","onChange","onClick","length","current","focus","alert","memo","DiaryItem","id","created_date","onRemove","onEdit","isEditNow","setIsEditNow","toggleIsEditNow","localContent","setLoclContent","localContentRef","Date","toLocaleString","window","confirm","DiaryList","data","DiaryStateContext","map","it","idx","createContext","reducer","state","action","getTime","filter","targetId","newContent","App","useReducer","dispatch","dataId","getData","a","setTimeout","fetch","then","res","json","initData","slice","email","body","Math","floor","random","useCallback","memoizedDiaryAnalysis","useMemo","goodCount","badCount","goodRatio","store","memoizedDispatch","Provider","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.13f7327d.chunk.js","sourcesContent":["import React, { memo, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { DiaryDispatchContext } from \"./App\";\r\n\r\nconst DiaryEditor = () => {\r\n  const { onCreate } = useContext(DiaryDispatchContext);\r\n  useEffect(() => {\r\n    console.log(\"DiaryEditor 렌더\");\r\n  });\r\n\r\n  const [diary, setDiary] = useState({\r\n    author: \"\",\r\n    content: \"\",\r\n    emotion: 1\r\n  });\r\n\r\n  const handleChangeDiary = (e) => {\r\n    setDiary({\r\n      ...diary,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const handleAddButtonClick = () => {\r\n    console.log(\"추가될 일기 : \", diary);\r\n\r\n    if (diary.author.length < 1) {\r\n      authorRef.current.focus();\r\n      return;\r\n    }\r\n\r\n    if (diary.content.length < 5) {\r\n      contentRef.current.focus();\r\n      return;\r\n    }\r\n\r\n    onCreate(diary.author, diary.content, diary.emotion);\r\n    alert(\"일기가 성공적으로 추가되었습니다!\");\r\n\r\n    setDiary({\r\n      author: \"\",\r\n      content: \"\",\r\n      emotion: 1\r\n    });\r\n  };\r\n\r\n  const authorRef = useRef(null);\r\n  const contentRef = useRef(null);\r\n\r\n  return (\r\n    <div className=\"DiaryEditor_container\">\r\n      <h2>오늘의 일기</h2>\r\n      <div>\r\n        <input\r\n          ref={authorRef}\r\n          name=\"author\"\r\n          placeholder=\"작성자(1글자 이상 입력해 주세요)\"\r\n          type=\"text\"\r\n          value={diary.author}\r\n          onChange={handleChangeDiary}\r\n        />\r\n      </div>\r\n      <div>\r\n        <textarea\r\n          ref={contentRef}\r\n          name=\"content\"\r\n          placeholder=\"일기(5글자 이상 입력해 주세요)\"\r\n          type=\"text\"\r\n          value={diary.content}\r\n          onChange={handleChangeDiary}\r\n        />\r\n      </div>\r\n      <div>\r\n        <span>오늘의 감정점수 : </span>\r\n        <select\r\n          name=\"emotion\"\r\n          value={diary.emotion}\r\n          onChange={handleChangeDiary}\r\n        >\r\n          <option value={1}>1</option>\r\n          <option value={2}>2</option>\r\n          <option value={3}>3</option>\r\n          <option value={4}>4</option>\r\n          <option value={5}>5</option>\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <button onClick={handleAddButtonClick}>내맘속에 저장</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(DiaryEditor);\r\n","import React, { memo, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { DiaryDispatchContext } from \"./App\";\r\n\r\nconst DiaryItem = ({ id, author, content, emotion, created_date }) => {\r\n  const { onRemove, onEdit } = useContext(DiaryDispatchContext);\r\n\r\n  useEffect(() => {\r\n    console.log(`${id}번 일기아이템 렌더`);\r\n  });\r\n\r\n  const [isEditNow, setIsEditNow] = useState(false);\r\n  const toggleIsEditNow = () => setIsEditNow(!isEditNow);\r\n\r\n  const [localContent, setLoclContent] = useState(content);\r\n  const localContentRef = useRef(null);\r\n\r\n  const handleClickDelete = () => {\r\n    if (window.confirm(`${id+1}번 째 일기를 삭제하시겠습니까?`)) {\r\n      onRemove(id);\r\n    }\r\n  };\r\n\r\n  const handleClickEdit = () => {\r\n    if (localContent.length < 1) {\r\n      localContentRef.current.focus();\r\n      return;\r\n    }\r\n\r\n    if (window.confirm(`${id+1}번 째 일기를 수정하시겠습니까?`)) {\r\n      onEdit(id, localContent);\r\n      toggleIsEditNow();\r\n    }\r\n  };\r\n\r\n  const handleQuitEdit = () => {\r\n    setLoclContent(content);\r\n    toggleIsEditNow();\r\n  };\r\n\r\n  return (\r\n    <div className=\"DiaryItem_container\">\r\n      <div className=\"info\">\r\n        <span className=\"author_info\">\r\n          | 작성자 : {author} | 감정점수 : {emotion} |\r\n        </span>\r\n        <br />\r\n        <span className=\"date\">{new Date(created_date).toLocaleString()}</span>\r\n      </div>\r\n\r\n      <div className=\"content\">\r\n        {isEditNow ? (\r\n          <textarea\r\n            ref={localContentRef}\r\n            value={localContent}\r\n            onChange={(e) => setLoclContent(e.target.value)}\r\n          />\r\n        ) : (\r\n          content\r\n        )}\r\n      </div>\r\n      {isEditNow ? (\r\n        <div className=\"buttons\">\r\n          <button className=\"btn negative\" onClick={handleQuitEdit}>취소</button>\r\n          <button className=\"btn positive\" onClick={handleClickEdit}>저장</button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"buttons\">\r\n          <button className=\"btn negative\" onClick={handleClickDelete}>삭제</button>\r\n          <button className=\"btn positive\" onClick={toggleIsEditNow}>수정</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(DiaryItem);\r\n","import React, { useContext } from \"react\";\r\nimport { DiaryStateContext } from \"./App\";\r\nimport DiaryItem from \"./DiaryItem\";\r\n\r\nconst DiaryList = () => {\r\n  const { data } = useContext(DiaryStateContext);\r\n\r\n  return (\r\n    <div className=\"DiaryList_container\">\r\n      <h2>일기 리스트</h2>\r\n      <h4>{data.length}개의 일기가 있습니다.</h4>\r\n      <div>\r\n        {data.map((it, idx) => (\r\n          <DiaryItem key={`diaryitem_${it.id}`} {...it} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiaryList;\r\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  createContext,\n} from 'react';\nimport DiaryEditor from './DiaryEditor';\nimport DiaryList from './DiaryList';\nimport './App.css';\n\nexport const DiaryStateContext = createContext(null);\nexport const DiaryDispatchContext = createContext(null);\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INIT': {\n      return action.data;\n    }\n    case 'CREATE': {\n      const created_date = new Date().getTime();\n\n      const newItem = {\n        ...action.data,\n        created_date,\n      };\n      return [newItem, ...state];\n    }\n    case 'REMOVE': {\n      return state.filter((it) => it.id !== action.targetId);\n    }\n    case 'EDIT': {\n      return state.map((it) =>\n        it.id === action.targetId\n          ? {\n              ...it,\n              content: action.newContent,\n            }\n          : it\n      );\n    }\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [data, dispatch] = useReducer(reducer, []);\n  const dataId = useRef(0);\n  const getData = async () => {\n    setTimeout(async () => {\n      const res = await fetch(\n        'https://jsonplaceholder.typicode.com/comments'\n      ).then((res) => res.json());\n\n      const initData = res.slice(0, 5).map((it) => {\n        return {\n          author: it.email,\n          content: it.body,\n          emotion: Math.floor(Math.random() * 5) + 1,\n          created_date: new Date().getTime(),\n          id: dataId.current++,\n        };\n      });\n\n      dispatch({ type: 'INIT', data: initData });\n    }, 2000);\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const onCreate = useCallback((author, content, emotion) => {\n    dispatch({\n      type: 'CREATE',\n      data: { author, content, emotion, id: dataId.current },\n    });\n    dataId.current += 1;\n  }, []);\n\n  const onRemove = useCallback((targetId) => {\n    dispatch({ type: 'REMOVE', targetId });\n  }, []);\n\n  const onEdit = useCallback((targetId, newContent) => {\n    dispatch({\n      type: 'EDIT',\n      targetId,\n      newContent,\n    });\n  }, []);\n\n  const memoizedDiaryAnalysis = useMemo(() => {\n    const goodCount = data.filter((it) => it.emotion >= 3).length;\n    const badCount = data.length - goodCount;\n    const goodRatio = (goodCount / data.length) * 100.0;\n    return { goodCount, badCount, goodRatio };\n  }, [data.length]);\n\n  const { goodCount, badCount, goodRatio } = memoizedDiaryAnalysis;\n\n  const store = {\n    data,\n  };\n\n  const memoizedDispatch = useMemo(() => {\n    return { onCreate, onRemove, onEdit };\n  }, []);\n\n  return (\n    <DiaryStateContext.Provider value={store}>\n      <DiaryDispatchContext.Provider value={memoizedDispatch}>\n        <div className=\"App\">\n          <DiaryEditor />\n          <br />\n          <div className=\"statList\">\n            <div className=\"stat\">전체 일기 개수 : {data.length}</div>\n            <div className=\"stat\">기분 좋은 일기 개수 : {goodCount}</div>\n            <div className=\"stat\">기분 나쁜 일기 개수 : {badCount}</div>\n            <div className=\"stat\">기분 좋은 일기 비율 : {goodRatio}%</div>\n          </div>\n          <DiaryList />\n        </div>\n      </DiaryDispatchContext.Provider>\n    </DiaryStateContext.Provider>\n  );\n};\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}